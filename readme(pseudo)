The Basics:
1. tic tac toe game for player 1 and player 2
2. each player takes turns
3. cannot reuse/replace a space that is already taken
4. there are 8 ways to potentially win
5. when one of the 8 ways are fulfilled, player x wins!
6. reset game


1) Define required constants
    1.1) Define a colors object with keys of 'null' (when the square is empty), and players 1 & -1. The value assigned to each key represents the color to display for an empty square (null), player 1 and player -1.

one object: colors with...
keys:
    -'null'=
    -player 1
    -player -1

value of keys represents the color display for...
values for:
    -'null' is X color
    -player 1 is Y color
    -player -1 is Z color

Object example = {
    key = value
}

const colors = {
    color = value

	1.2) Define the 8 possible winning combinations, each containing three indexes of the board that make a winner if they hold the same player value.

1. Horizontal - top row (spaces 1, 2, 3)
2. Horizontal - middle row (spaces 4, 5, 6)
3. Horizontal - bottom row (spaces 7, 8, 9)
4. Vertical - left row (spaces 1, 4, 7)
5. Vertical - midlle row (spaces 2, 5, 8)
6. Vertical - right row (spaces 3, 6, 9)
7. Diagonal - left to right (spaces 1, 5, 9)
8. Diagonal - right to left (spaces 3, 5, 7)


2) Define required variables used to track the state of the game
    2.1) Use a board array to represent the squares.	

    2.2) Use a turn variable to remember whose turn it is.

	2.3) Use a winner variable to represent three different possibilities - player that won, a tie, or game in play.

board (array) - represent the squares/indexes in 1.2
STATE VARIABLES:
nextMove - declares the game to continue
winner - winner holds one of the 3 indexes in 1.2
loser - does NOT hold one of the 3 indexes in 1.2


3) Store elements on the page that will be accessed in code more than once in variables to make code more concise, readable and performant.
	3.1) Store the 9 elements that represent the squares on the page.
??????
9 different variables? or Key value pairs to represent the squares?


4) Upon loading the app should:
	4.1) Initialize the state variables
        4.1.1) Initialize the board array to 9 nulls to represent empty squares. The 9 elements will "map" to each square, where index 0 maps to the top-left square and index 8 maps to the bottom-right square.

start game set up - board array initializes to 9 nulls to represent empty squares
assign each square to the 9 elements where index 0 maps to the top-left square and index 8 maps to the bottom-right square.

	    4.1.2) Initialize whose turn it is to 1 (player 'X'). Player 'O' will be represented by -1.

start game set up- Initialize player 1 (X) and player -1 (O)

		4.1.3) Initialize winner to null to represent that there is no winner or tie yet. Winner will hold the player value (1 or -1) if there's a winner. Winner will hold a 'T' if there's a tie. 

start game set up- winner is set to null (no winner or tie yet)
Winner hold the player value of 1 or -1 or T for tie

	4.2) Render those state variables to the page:
        4.2.1) Render the board:
		4.2.1.1) Loop over each of the 9 elements that represent the squares on the page, and for each iteration:

LOOP over the 9 elements that represents the squares on the page
    each iteration will....

			4.2.1.1.2) Use the index of the iteration to access the mapped value from the board array.

Use index of the iteration (array[i]) to access the mapped value from the board array

			4.3.1.1.3) Set the background color of the current element by using the value as a key on the colors lookup object (constant).	

set background color of the current element through key-value pairs
using the value as a key on the colors lookp object (constant)



        4.2.2) Render a message:
			4.2.2.1) If winner has a value other than null (game still in progress), render whose turn it is - use the color name for the player, converting it to upper case.

if winner value = null > game still in progress)
render (console.log) whose turn it is: use the color name for the player > converting it to uppercase

			4.2.2.2) If winner is equal to 'T' (tie), render a tie message.

if winner === T (tie) render (console log) tie message

			4.2.2.3) Otherwise, render a congratulatory message to which player has won - use the color name for the player, converting it to uppercase.

else, render a congratulatory message to which player has won - 
use the color name for the player, converting it to uppercase.

	4.3) Wait for the user to click a square
 wait aka eventListener    


5) Handle a player clicking a square
    5.1) Obtain the index of the square that was clicked by either:
		5.1.1) "Extracting" the index from an id assigned to the element in the HTML, or
		5.1.2) Looping through the cached square elements using a for loop and breaking out when the current square element equals the event object's target.

	5.2) If the board has a value at the index, immediately return because that square is already taken.

	5.3) If winner is not null, immediately return because the game is over.

	5.4) Update the board array at the index with the value of turn.

	5.5) Flip turns by multiplying turn by -1 (flips a 1 to -1, and vice-versa).

	5.6) Set the winner variable if there's a winner:
		5.6.1) Loop through the each of the winning combination arrays defined.
		5.6.2) Total up the three board positions using the three indexes in the current combo.
		5.6.3) Convert the total to an absolute value (convert any negative total to positive).
		5.6.4) If the total equals 3, we have a winner! Set winner to the board's value at the index specified by the first index in the combo array. Exit the loop.
	5.7) If there's no winner, check if there's a tie:
		5.7.1) Set winner to 'T' if there are no more nulls in the board array.
	5.8) All state has been updated, so render the state to the page (step 4.2).

6) Handle a player clicking the replay button
